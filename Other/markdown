### 导入必要的库

```python
import os
import numpy as np
from datetime import datetime, timedelta
from scipy.stats import zscore
from obspy import read
```

- `os`：用于处理文件和目录的操作。
- `numpy`：用于科学计算，特别是数组处理。
- `datetime`：用于处理日期和时间。
- `scipy.stats.zscore`：用于计算数据的 z-score，以便去除离群值。
- `obspy`：用于处理地震数据文件（如 `.miniseed` 文件）。

### 定义路径

```python
STABLE_CURRENT_FILE = 'C:/Users/xiaoyu/Desktop/data_nkd/data2/MoniterData.crt'  # 替换为实际的稳定电流文件路径
RECEIVER_DATA_PATH = 'C:/Users/xiaoyu/Desktop/data_nkd/data2'  # 替换为实际的接收器数据路径
OUTPUT_PATH = 'C:/Users/xiaoyu/Desktop/output'  # 替换为实际的输出路径
```

- `STABLE_CURRENT_FILE`：指定稳定电流文件的路径。
- `RECEIVER_DATA_PATH`：指定接收器数据文件所在的目录。
- `OUTPUT_PATH`：指定输出文件的目录。

### 创建输出文件夹（如果不存在）

```python
if not os.path.exists(OUTPUT_PATH):
    os.makedirs(OUTPUT_PATH)
```

- 检查 `OUTPUT_PATH` 是否存在。如果不存在，则创建该目录。

### 读取稳定电流文件的函数

```python
def read_stable_current_file(file_path):
    stable_segments = []
    with open(file_path, 'r') as f:
        lines = f.readlines()
        for line in lines[1:]:  # 跳过第一行的时间戳
            parts = line.strip().split(', ')
            start, end, current = int(parts[0]), int(parts[1]), float(parts[2])
            stable_segments.append((start, end, current))
    return stable_segments
```

- 打开并读取稳定电流文件。
- 跳过第一行的时间戳信息。
- 将每行的数据分割并转换为整数（起始点和终止点）和浮点数（电流值），然后添加到 `stable_segments` 列表中。
- 返回稳定段的列表。

### 读取时间序列文件的函数

```python
def read_time_series(file_path):
    st = read(file_path)
    tr = st[0]
    data = tr.data
    return data
```

- 使用 `obspy` 库读取 `.miniseed` 文件。
- 提取时间序列数据并返回。

### 去除离群值的函数

```python
def remove_outliers(data, threshold=3):
    z_scores = zscore(data)
    filtered_indices = np.where(np.abs(z_scores) < threshold)[0]
    mean_value = np.mean(data[filtered_indices])
    return mean_value, filtered_indices
```

- 计算数据的 z-score。
- 找到 z-score 小于阈值的索引。
- 计算并返回这些数据的均值和索引。

### 检测稳定段的函数

```python
def detect_stable_segments(data, window_size=10, threshold=0.01, min_length=10):
    num_windows = len(data) - window_size + 1
    data_y = np.zeros(num_windows)

    for i in range(num_windows):
        idx = slice(i, i + window_size)
        if (i + window_size) <= len(data) and (i + 2 * window_size) <= len(data):
            idy = slice(i + window_size, i + 2 * window_size)
            data_y[i] = np.mean(data[idy]) - np.mean(data[idx])
        else:
            data_y[i] = np.mean(data[idx])

    add_value = np.mean(data_y)
    data_y = np.concatenate((np.full(window_size, add_value), data_y))

    absnum = np.max(data_y) / 2
    data_y[np.abs(data_y) < absnum] = 0

    peak_sort = []
    for i in range(1, len(data_y) - 1):
        if (data_y[i] - data_y[i - 1]) * (data_y[i + 1] - data_y[i]) < 0:
            peak_sort.append(i)

    peak = []
    for i in range(len(peak_sort) - 1):
        if peak_sort[i + 1] - peak_sort[i] < 20:
            peak.append(peak_sort[i])

    peak_sort = [p for p in peak_sort if p not in peak]

    return peak_sort
```

- 使用滑动窗口计算数据的差值，并检测稳定段。
- 返回检测到的峰值索引列表。

### 计算直流幅值的函数

```python
def calculate_dc_amp(data, peak_sort, Hall_coefficient):
    DC_amp = []
    peakindices = []

    for i in range(len(peak_sort) - 1):
        if peak_sort[i + 1] <= len(data):
            mean_value, indices = remove_outliers(data[peak_sort[i]:peak_sort[i + 1]])
            DC_amp.append(mean_value * Hall_coefficient)
            peakindices.append((peak_sort[i] + min(indices) + 3, peak_sort[i] + max(indices) - 3))

    DC_amp = np.array(DC_amp)
    DC_amp[np.abs(DC_amp) < (np.max(DC_amp) / 2)] = 0

    return peakindices, DC_amp
```

- 根据检测到的峰值索引计算直流幅值。
- 返回峰值索引和直流幅值的列表。

### 计算平均电压值的函数

```python
def calculate_average_voltage(data, segments, conversion_factor):
    voltages = []
    for start, end, _ in segments:
        if start < len(data) and end < len(data):
            segment_data = data[start:end+1]
            mean_value = np.mean(segment_data) * conversion_factor
            voltages.append(mean_value)
        else:
            voltages.append(np.nan)  # 标记为 NAN
    return voltages
```

- 在稳定段内计算平均电压值。
- 返回电压值的列表。

### 写入稳定电压文件的函数

```python
def write_voltage_file(filename, segments, voltages, timestamp, sample_interval=0.001):
    date_time_str = timestamp.strftime('%Y%m%d%H%M')
    start_sample = segments[0][0] if segments else 0

    with open(filename, 'w') as f:
        f.write(f'{date_time_str}, {start_sample}, {sample_interval}E-3\n')
        for (start, end, _), voltage in zip(segments, voltages):
            f.write(f'{start}, {end}, {voltage}\n')
```

- 写入稳定电压文件，文件名格式为 `.vsb`。
- 第一行包含绝对时间、起算点和采样间隔信息。
- 后续每行包含稳定段的起始和终止样点及其对应的电压值。

### 写入正负电压文件的函数

```python
def write_positive_negative_voltage_file(filename, segments, voltages):
    with open(filename, 'w') as f:
        for (start, end, _), voltage in zip(segments, voltages):
            pos_voltage = voltage if voltage > 0 else 0
            neg_voltage = voltage if voltage < 0 else 0
            f.write(f'{start}, {end}, {pos_voltage}, {neg_voltage}\n')
```

- 写入正负电压文件，文件名格式为 `.vpm`。
- 每行包含稳定段的起始和终止样点及其对应的正负电压值。

### 写入叠加电压文件的函数

```python
def write_stack_voltage_file(filename, segments, voltages):
    with open(filename, 'w') as f:
        cumulative_voltage = 0
        for (start, end, _), voltage in zip(segments, voltages):
            cumulative_voltage += voltage
            f.write(f'{start}, {end}, {cumulative_voltage}\n')
```

- 写入叠加电压文件，文件名格式为 `.vsk`。
- 每行包含稳定段的起始和终止样点及其对应的累积电压值。

### 主函数，检测稳定段并生成CRT文件

```python
def monitor_new(data, timestamp, Hall_coefficient, tx_id):
    window_size = 10
    peak_sort = detect_stable_segments(data, window_size)
    peakindices, DC_amp = calculate_dc_amp(data, peak_sort, Hall_coefficient)

    if not os.path.exists(OUTPUT_PATH):
        os.makedirs(OUTPUT_PATH)

    output_filename = os.path.join(OUTPUT_PATH, f'{timestamp.strftime("%Y%m%d%H%M")}-{tx_id}.crt')
    write_crt_file(output_filename, peakindices, DC_amp, timestamp)

    print(f'Data successfully written to {output_filename}')
```

- 检测稳定段并生成CRT文件，文件名格式为 `.crt`。
- 输出文件路径格式为 `输出路径/时间戳-接收器ID.crt

`。

### 主函数

```python
def main():
    # 读取稳定电流文件
    stable_segments = read_stable_current_file(STABLE_CURRENT_FILE)
    
    # 获取当前时间，用于生成文件名
    current_time = datetime.now().strftime('%Y%m%d%H%M')
    timestamp = datetime.now()
    
    # 假设转换系数为 1.0，实际使用时应根据具体情况替换
    conversion_factor = 1.0
    
    # 遍历接收器数据文件
    for receiver_file in os.listdir(RECEIVER_DATA_PATH):
        if receiver_file.endswith('.miniseed'):
            receiver_path = os.path.join(RECEIVER_DATA_PATH, receiver_file)
            data = read_time_series(receiver_path)
            voltages = calculate_average_voltage(data, stable_segments, conversion_factor)
            
            # 生成输出文件名
            tx_id = receiver_file.split('.')[0]
            vsb_filename = os.path.join(OUTPUT_PATH, f'{current_time}-{tx_id}.vsb')
            vpm_filename = os.path.join(OUTPUT_PATH, f'{current_time}-{tx_id}.vpm')
            vsk_filename = os.path.join(OUTPUT_PATH, f'{current_time}-{tx_id}.vsk')

            write_voltage_file(vsb_filename, stable_segments, voltages, timestamp)
            write_positive_negative_voltage_file(vpm_filename, stable_segments, voltages)
            write_stack_voltage_file(vsk_filename, stable_segments, voltages)

            print(f'Data successfully written to {vsb_filename}, {vpm_filename}, {vsk_filename}')
```

- 读取稳定电流文件。
- 遍历接收器数据文件，读取数据并计算电压值。
- 生成 `.vsb`、`.vpm` 和 `.vsk` 文件，并将结果保存到输出路径。

### 脚本入口

```python
if __name__ == "__main__":
    # 读取实际的时间序列数据
    file_path = 'C:/Users/xiaoyu/Desktop/data_nkd/data2/600000024.20240513.090300000.Z.miniseed'  # 实际文件路径
    data = read_time_series(file_path)
    
    # 设置实际的时间戳
    timestamp = datetime.now()  # 或者使用实际的时间戳
    
    # 设置实际的霍尔系数
    Hall_coefficient = 1.5  # 替换为实际的霍尔系数
    
    # 设置实际的TX_ID
    tx_id = '253000319'  # 替换为实际的TX_ID

    monitor_new(data, timestamp, Hall_coefficient, tx_id)

    # 执行主函数
    main()
```

- 脚本入口部分读取实际的时间序列数据，设置时间戳和霍尔系数，调用 `monitor_new` 函数和 `main` 函数执行数据处理和文件生成任务。